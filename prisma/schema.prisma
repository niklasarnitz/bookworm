generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Category {
    id          String     @id @default(cuid())
    name        String
    path        String     @unique // Stores the hierarchical identifier (e.g., "1.2.3")
    sortOrder   Int        // To maintain order within its level
    level       Int        // Depth level in the hierarchy (0 for root)

    // Self-relation for parent-child hierarchy
    parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
    parentId    String?
    children    Category[] @relation("CategoryHierarchy")

    books       Book[]

    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    user       User      @relation(fields: [userId], references: [id])
    userId     String @default("cm9vhjvpo0000btb9gdu2ny14")

    @@index([parentId])
    @@index([path])
    @@index([name])
}

model Book {
    id        String    @id @default(cuid())
    isbn      String?
    name      String
    subtitle  String?

    publisher String?
    pages     Int?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    bookAuthors BookAuthorRelation[]

    series    Series?   @relation(fields: [seriesId], references: [id])
    seriesId  String?
    seriesNumber Float?

    coverUrl  String?

    category  Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    user       User      @relation(fields: [userId], references: [id])
    userId     String @default("cm9vhjvpo0000btb9gdu2ny14")

    @@index([name])
    @@index([seriesId])
    @@index([categoryId])
}

model BookAuthorRelation {
    id        String   @id @default(cuid())
    book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
    bookId    String
    author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    tag       String?  // Optional tag like "herausgeber"

    @@unique([bookId, authorId])
    @@index([bookId])
    @@index([authorId])
}

model Author {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    books     BookAuthorRelation[]

    user       User      @relation(fields: [userId], references: [id])
    userId     String @default("cm9vhjvpo0000btb9gdu2ny14")

    @@index([name])
}

model Series {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    books     Book[]

    user       User      @relation(fields: [userId], references: [id])
    userId     String @default("cm9vhjvpo0000btb9gdu2ny14")

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    username      String    @unique
    password      String
    emailVerified DateTime?
    image         String?

    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt @default(now())

    accounts      Account[]
    sessions      Session[]
    books         Book[]
    categories    Category[]
    authors       Author[]
    series        Series[]

    role UserRole @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
