// filepath: /Users/narnitz/privat/bookworm/src/components/books/BookSearchDialog.tsx
import React, { useState, useEffect, useCallback } from "react";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { type BookDetail, type BookSearchResult } from "~/lib/book-metadata/types";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "~/components/ui/dialog";
import { uncachedApiClient } from "~/trpc/react";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "~/components/ui/accordion";
import { Loader2, AlertCircle } from "lucide-react";
import { Badge } from "~/components/ui/badge";

// Type definitions for search results
interface ServiceSearchResult {
  serviceId: string;
  serviceName: string;
  results: BookSearchResult[];
  error: string | null;
}

interface BookSearchDialogProps {
  onBookSelect: (bookData: BookDetail) => void;
  onClose: () => void;
  initialIdentifier?: string;
}

type SearchStep = "search" | "select" | "detail";

export function BookSearchDialog({
  onBookSelect,
  onClose,
  initialIdentifier = "",
}: Readonly<BookSearchDialogProps>) {
  // Core state
  const [identifier, setIdentifier] = useState(initialIdentifier);
  const [step, setStep] = useState<SearchStep>("search");

  // Loading and error states
  const [isSearching, setIsSearching] = useState(false);
  const [isLoadingDetails, setIsLoadingDetails] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Search results state
  const [searchResults, setSearchResults] = useState<ServiceSearchResult[] | null>(null);

  // Flag to prevent duplicate initial searches
  const [initialSearchComplete, setInitialSearchComplete] = useState(false);

  // Calculate total results
  const totalResultsCount =
    searchResults?.reduce((sum, service) => sum + service.results.length, 0) ??
    0;

  // Number of services with results
  const servicesWithResultsCount =
    searchResults?.filter((service) => service.results.length > 0).length ?? 0;

  // Helper function to sanitize URLs and handle special characters
  const sanitizeUrl = useCallback(
    (url: string): string => {
      // First, trim any whitespace
      let sanitized = url.trim();

      try {
        // Test if it's already a valid URL
        new URL(sanitized);
        return sanitized;
      } catch (err) {
        console.log(`URL validation failed: ${String(err)}`);

        // Handle Amazon's special URL format with /dp/ or /gp/ paths
        if (sanitized.includes("/dp/") || sanitized.includes("/gp/")) {
          // Try to extract ASIN or ISBN from the URL
          const regex = /\/(dp|gp)\/([A-Z0-9]{10})/i;
          const execResult = regex.exec(sanitized);
          if (execResult?.[2]) {
            const asin = execResult[2];
            return `https://www.amazon.de/dp/${asin}`;
          }
        }

        // If it has percent-encoding, try to decode it (sometimes helps with Amazon URLs)
        if (sanitized.includes("%")) {
          try {
            sanitized = decodeURIComponent(sanitized);
          } catch (decodeErr) {
            console.log(`URL decode failed: ${String(decodeErr)}`);
          }
        }

        // Check if it's a relative URL and prepend the base URL
        if (sanitized.startsWith('/')) {
          return `https://www.amazon.de${sanitized}`;
        }

        // Remove any problematic characters that might be causing issues
        return sanitized.replace(/["'<>]/g, "");
      }
    },
    []
  );

  // Search handler - completely decoupled from React Query hooks
  const handleSearch = useCallback(async () => {
    if (!identifier?.trim()) {
      setError("Please enter an ISBN or other identifier to search");
      return;
    }

    try {
      // Reset state and show loading
      setError(null);
      setIsSearching(true);

      // Direct API fetch using uncached client instead of React Query
      const results = await uncachedApiClient.bookMetadata.searchAllServices.query({
        identifier: identifier.trim(),
      });

      console.log("Search results received:", results);

      // Check if we have any actual results
      if (
        !results ||
        results.every(
          (service) => !service.results || service.results.length === 0
        )
      ) {
        throw new Error("No results found in any of the services.");
      }

      // Store results and show selection step
      setSearchResults(results);
      setStep("select");
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : "Error searching for books";
      console.error("Search error:", err);
      setError(errorMessage);
      setStep("search");
    } finally {
      setIsSearching(false);
    }
  }, [identifier]);

  // Auto search when initialIdentifier is provided
  useEffect(() => {
    if (initialIdentifier && !initialSearchComplete) {
      setInitialSearchComplete(true);
      void handleSearch();
    }
  }, [initialIdentifier, initialSearchComplete, handleSearch]);

  // Book selection handler - uses uncached client for consistency
  const handleSelectBook = useCallback(
    async (serviceId: string, detailUrl: string) => {
      try {
        // Reset error state and show loading state
        setError(null);
        setIsLoadingDetails(true);
        setStep("detail");

        // Sanitize URL to avoid validation issues
        const sanitizedUrl = sanitizeUrl(detailUrl);
        console.log(
          `Getting details for book: serviceId=${serviceId}, url=${sanitizedUrl}`
        );

        // Direct API call for details with type assertion for amazon service
        const result = await uncachedApiClient.bookMetadata.getBookDetail.query({
          serviceId: "amazon" as const, // Only amazon is currently supported
          detailUrl: sanitizedUrl,
        });

        console.log("Book detail result:", result);

        // Pass the result back to the parent component
        onBookSelect(result);
        onClose();
      } catch (err) {
        const errorMessage =
          err instanceof Error
            ? err.message
            : "Error getting book details";
        console.error("Error selecting book:", err);
        setError(errorMessage);
        setStep("select"); // Back to selection on error
      } finally {
        setIsLoadingDetails(false);
      }
    },
    [onBookSelect, onClose, sanitizeUrl]
  );

  // Render search results with Accordion UI
  const renderSearchResults = useCallback(() => {
    if (!searchResults) return null;

    const servicesWithResults = searchResults.filter(
      (service) => service.results?.length > 0
    );

    if (servicesWithResults.length === 0) {
      return (
        <div className="text-muted-foreground py-4 text-center text-sm">
          No results found in any service
        </div>
      );
    }

    return (
      <Accordion
        type="single"
        collapsible
        className="w-full"
        defaultValue={servicesWithResults[0]?.serviceId}
      >
        {servicesWithResults.map((service) => (
          <AccordionItem key={service.serviceId} value={service.serviceId}>
            <AccordionTrigger className="hover:no-underline">
              <span className="flex items-center gap-2">
                {service.serviceName}
                <Badge variant="secondary" className="ml-2">
                  {service.results.length}
                </Badge>
              </span>
            </AccordionTrigger>
            <AccordionContent>
              <div className="space-y-2 pt-2">
                {service.results.map((result, index) => {
                  const selectThisBook = () => {
                    void handleSelectBook(service.serviceId, result.detailUrl);
                  };

                  return (
                    <div
                      key={`${service.serviceId}-${index}`}
                      className="hover:bg-muted flex w-full cursor-pointer items-center justify-between rounded-md border p-3 transition-colors"
                      onClick={selectThisBook}
                      role="button"
                      tabIndex={0}
                      onKeyDown={(e) => {
                        if (e.key === "Enter" || e.key === " ") {
                          e.preventDefault();
                          selectThisBook();
                        }
                      }}
                      aria-label={`Select ${result.title} by ${result.author}`}
                    >
                      <div className="flex-grow text-left">
                        <h3 className="font-medium">{result.title}</h3>
                        <p className="text-muted-foreground text-sm">
                          {result.author}
                        </p>
                      </div>
                      <div
                        className="ml-2 inline-flex h-8 items-center justify-center rounded-md bg-transparent px-3 text-sm font-medium text-foreground hover:bg-accent hover:text-accent-foreground"
                        role="button"
                        tabIndex={0}
                        onClick={(e) => {
                          e.stopPropagation();
                          selectThisBook();
                        }}
                        onKeyDown={(e) => {
                          if (e.key === "Enter" || e.key === " ") {
                            e.preventDefault();
                            e.stopPropagation();
                            selectThisBook();
                          }
                        }}
                        aria-label={`Select ${result.title}`}
                      >
                        Select
                      </div>
                    </div>
                  );
                })}
              </div>
            </AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>
    );
  }, [searchResults, handleSelectBook]);

  // Show service errors if any
  const renderServiceErrors = useCallback(() => {
    if (!searchResults?.some((service) => service.error)) return null;

    return (
      <div className="mt-4 rounded-md border border-amber-200 bg-amber-50 p-3 dark:border-amber-900 dark:bg-amber-950/30">
        <div className="flex items-center gap-2">
          <AlertCircle className="h-4 w-4 text-amber-600 dark:text-amber-400" />
          <p className="text-sm font-medium text-amber-800 dark:text-amber-300">
            Some services encountered errors:
          </p>
        </div>
        <ul className="mt-2 list-disc pl-5 text-sm text-amber-700 dark:text-amber-400">
          {searchResults
            .filter((service) => service.error)
            .map((service) => (
              <li key={service.serviceId}>
                {service.serviceName}: {service.error}
              </li>
            ))}
        </ul>
      </div>
    );
  }, [searchResults]);

  return (
    <Dialog open onOpenChange={onClose}>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle>Search Book Metadata</DialogTitle>
        </DialogHeader>

        {error && (
          <div className="rounded-md bg-red-50 p-3 text-sm text-red-700 dark:bg-red-950/30 dark:text-red-400">
            {error}
          </div>
        )}

        {/* Search Form */}
        {step === "search" && (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Input
                value={identifier}
                onChange={(e) => setIdentifier(e.target.value)}
                placeholder="Enter ISBN or other identifier"
                className="flex-1"
                onKeyDown={(e) => {
                  if (e.key === "Enter" && identifier.trim()) {
                    void handleSearch();
                  }
                }}
              />
              <Button
                onClick={() => void handleSearch()}
                disabled={!identifier.trim() || isSearching}
              >
                {isSearching ? "Searching..." : "Search"}
              </Button>
            </div>
            <p className="text-muted-foreground text-sm">
              Enter an ISBN or other identifier to search across all available
              sources.
            </p>
          </div>
        )}

        {/* Results List */}
        {step === "select" && searchResults && (
          <div className="max-h-[60vh] space-y-4 overflow-y-auto">
            <div className="flex justify-between">
              <h3 className="text-sm font-medium">
                Found {totalResultsCount} results across{" "}
                {servicesWithResultsCount} services
              </h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setStep("search")}
              >
                Back to Search
              </Button>
            </div>

            {renderSearchResults()}
            {renderServiceErrors()}
          </div>
        )}

        {/* Loading States */}
        {isSearching && (
          <div className="flex flex-col items-center justify-center py-8">
            <Loader2 className="text-primary h-8 w-8 animate-spin" />
            <p className="mt-2 text-sm">Searching across all services...</p>
          </div>
        )}

        {step === "detail" && isLoadingDetails && (
          <div className="flex flex-col items-center justify-center py-8">
            <Loader2 className="text-primary h-8 w-8 animate-spin" />
            <p className="mt-2 text-sm">Loading book details...</p>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
